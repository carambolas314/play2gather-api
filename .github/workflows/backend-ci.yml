name: Backend CI

on:
  push:
    branches:
      - main
      - development
    paths:
      - '**.java'
      - '**.xml'
  pull_request:
    branches:
      - main
      - development
    paths:
      - '**.java'
      - '**.xml'

jobs:
  build-backend:
    name: Build All Modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build all with Maven
        run: mvn clean install --no-transfer-progress

      - name: Upload JARs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-jars
          path: "**/target/*.jar"

  push-images:
    if: github.ref == 'refs/heads/main'
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Baixar JARs do build-backend
        uses: actions/download-artifact@v4
        with:
          name: backend-jars

      - name: Login no DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push de Imagens
        run: |
          for d in */ ; do
            if [ -f "$d/Dockerfile" ]; then
              SERVICE=$(basename "$d")
              docker build \
                --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
                -t ${{ secrets.DOCKERHUB_REPOSITORY }}:$SERVICE-latest \
                -f "$d/Dockerfile" "$d"
              docker push ${{ secrets.DOCKERHUB_REPOSITORY }}:$SERVICE-latest
            fi
          done

      - name: Criar estrutura do dev-env
        run: |
          mkdir -p dev-env
          cp infra/dev-env/.env.example dev-env/.env.example || true
          cp infra/dev-env/docker-compose.yml dev-env/docker-compose.yml
          cp infra/dev-env/setup.sh dev-env/setup.sh || true
          cp infra/dev-env/README.md dev-env/README.md || true
          chmod +x dev-env/setup.sh

      - name: Compactar em dev-env.zip
        run: zip -r dev-env.zip dev-env/

      - name: Armazenar como artefato
        uses: actions/upload-artifact@v4
        with:
          name: dev-env
          path: dev-env.zip

  upload-dev-env-with-rclone:
    if: github.ref == 'refs/heads/main'
    name: Upload dev-env.zip (Versionado por Commit)
    needs: push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Baixar artefato
        uses: actions/download-artifact@v4
        with:
          name: dev-env
          path: ./artifacts

      - name: Instalar RClone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          rclone version

      - name: Configurar RClone
        run: |
          mkdir -p ~/.config/rclone
          cat << EOF > ~/.config/rclone/rclone.conf
          ${{ secrets.RCLONE_CONFIG_DRIVE }}
          EOF

      - name: Upload Versionado
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          rclone copy ./artifacts/dev-env.zip \
            "${{ secrets.RCLONE_REMOTE_NAME }}:" \
            --drive-root-folder-id "${{ secrets.GDRIVE_FOLDER_ID }}" \
            --drive-upload-cutoff 64M \
            --drive-chunk-size 64M \
            --progress \
            --stats-one-line \
            --log-level INFO
          echo "âœ… Enviado: dev-env-${COMMIT_HASH}.zip"

      - name: Verificar Upload
        run: |
          rclone lsf "${{ secrets.RCLONE_REMOTE_NAME }}:" \
            --drive-root-folder-id "${{ secrets.GDRIVE_FOLDER_ID }}" \
            --include "dev-env-*"
